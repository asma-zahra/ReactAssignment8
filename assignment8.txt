Q- How do you create Nested Route react dom configuration?
   A- 
   1- npm install react-router-dom 
   2- craete Routing configration , so import createBrowserRoute
   3- createBrowserTouter(), pass list (array) of path to define default Route Element and Children Route Element, import {createReactRouter} from react-router-dom
   4-  <RouterProvider/> component, in which we pass our routing configuration as props route, so import {RouterProvider} from "react-router-dom";
   5- all the children route will be injected in <outlet/> component, so import { Outlet } from "react-router-dom";
   6- we need to profile component inside the about component ,  /about is children route ,inside this children Element about in route,  we can make children of children to the profile component

   7- Profile Component
    profile component:
   const Profile = ()=>{
    return(
        <>
        <h2>Profile section</h2>
        </>
      )
   }
   export default Profile;
   8- Routing Configguration:
   const appRouter = createBrowserRouter([
   {
      path: "/",
      element: <AppLayout />,
      errorElement: <Error />,
      children: [
         {
         path:"/",
         element: <Body/>
         },
         {
         path:"/about",
         element: <About/>
      Children:[{
      path:”profile”,
      Element: <Profile/>
      }
      ]
         },
         {
         path:"/contact",
         element: <Contact/>
         },
         {
         path:"/restaurant/:id",
         element: <RestaurantMenu/>
         },
      ]
   },
   
   ]);
   Note 
   -In children of children route  // Note- don't give slash “/profile” it will consider //localhost1234/profile . we don't want this path

   // In children of children route use relative  path: “profile” then it will consider 
   Take the parent path /about then add a profile to it. //localhost1234/about/profile
   Add Profile component as Element
   9- Most Important -  children of children  Profile component  will injected in Outlet of parent , So again  create outlet in Parent component About component

   1- Import outlet from react-router-dom
   Add outlet component in parent component  About

   const About = () => {
   return (
      <>
         <h1>About us page </h1>
         <p>This is React About Page</p>
         <Outlet/>
      </>
   );
   };
   export default About;

   OR you can directly add Profile component composition(component inside component)

   const About = () => {
   return (
      <>
         <h1>About us page </h1>
         <p>This is React About Page</p>
         <Profile/>
      </>
   );
   };
   export default About;


Q- What is order of Life Cycle Method call in Class Based Component?

   A- class About extends React.Component{
   constructor(props){
      super(props)
      console.log("parent constructor called");
   }
   componentDidMount(){
      console.log("Parent componentDidMount Method called")
   }
   render(){
      console.log("render method called which is returning the JSX")
      return(
         <>
         <h1>About us page </h1>
         <p>This is React About Page</p>
         <Profile name= "First Child"/>
         <Profile name= "Second Child"/>

         
         </>
      )
   }
   }
   export default About;

   Child component (Profile)

   class Profile extends React.Component{
      constructor(props){
         super(props)
         this.state = {
               count: 0, 
         }
         console.log("child constructor is called " + this.props.name)
      }
      componentDidMount(){
         console.log("child componentDidMount called after the child component render" + this.props.name);
      }
      render(){
         console.log("child render method is called" + this.props.name)
         return(
               <>
               <h2>Profile </h2>
               <p>{this.props.name}</p>
               <p>{this.state.count}</p>
               <button onClick={()=>{ this.setState({count:1})}}>Change count</button>
               
               </>
         )
      }
   }
   export default Profile;

   Output- order of Life Cycle Method call in Class Based Component
   1- First of all, as soon as the Parent class About will call , the Parent constructor will be called by default as class will inviked
   2- after that render() method of Parent is called which return JSX
   3- in JSX of Parent,  child component with props name=”first child” <profile name=”first child”> is called so Now Lifecycle of child class component will execute
   4- Execute life cycle of child component with props name=”first child”
   A- child constructor of first child will be called by default as soon as first child component call ,  child Profile class component with props name=”first child” <profile name=”first child”> will be invoked
   B- then render() method of first child, will be called which will return JSX of first child component
   5-  Execute life cycle of child component with props name=”second child”
   A- child constructor of a second child will be called by default as soon as the second child component is called ,   a child Profile component with props name=”second child” <profile name=”second child”>  will be invoked.
   B- then render() method of second child will be called which will return JSX of second child component

   C- “after the render of the first child component, the ComponentDidMountMethod of the first child component will be called. Now first  child component life cycle is complete
   D-  “after the render of the Second child component, the ComponentDidMountMethod of the Second child component will be called. Now  Second child component life cycle is complete
   5- Once the all child components' life cycle is completed then after ,the rest of the Parent Component’s lifecycle will be completed.
   6- ComponentDidMount method of Parent Component will  be called after the render() method of Parent is fully executed.
   7- Importnat Note of MOunting Phase
   A- Because When is multiple child nested In Mounting Phase , React first complete Batch up all the Render phase of all nested Child
   That’s why 1-  first child constructor method is called
   2- then first child render method is called
   3- then Second child constructor method is called
   4- then second child render method is called

   B- React then complete Batch up all the Commit phase of all nested Child and update the DOM for first child then Second Child

   C- Then after ComponentDidMount is called  once Initial Rendering  is finished with Render Phase and Commit Phase for all child
   first
   first child componentDidMount method is called
   Second child componentDidMount method is called


Q- Why do we use ComponentDidMount?
   A- 1- In functional components we use useEffect, useEffect will be called “after the component render”,Because at Initial render we will render the component with all the data , then after render we update the data by using API in useEffect., data will update then reconciliations see the changes gain then again component will render after updating the data
   2- In class based components
   We use the ComponentDidMount Method instead of useEffect, Because ComponentDidMount method will be called “after the class based component render”.  
   class Profile extends React.Component{
      constructor(props){
         super(props)
         this.state = {
               count: 0,
               count2: 0,
               
         }
         console.log("constructor is called")
      }
      componentDidMount(){
      //API Call
         console.log("componentDidMount called after the component render");
      }
      render(){
         
         return(
               <>
               <h2>Profile </h2>
               <p>{this.props.name}</p>
               <p>{this.state.count}</p>
               <button onClick={()=>{ this.setState({count:1})}}>Change count</button>
               {console.log("render method is called")}
               </>
         )
      }
   }
   export default Profile;

   Output- 
   in console 1- first constructor will call
   2 - then render method will call and render the JSX
   3-  after render the component now ComponentDidMount will call

Q- Why do you use ComponentWillUnmount. Show me Example?
   A- 1- ComponentWillUnmount  is used for cleanup. 
   2- ComponentUnMount will be called when component Profile will unload from DOM. 
   3- Suppose, When we go from profile to contact page, means when we leave profile page then the About profile component will unload from DOM, it will  unload from DOM then only the ComponentUnMount method of Profile component will be called. Because now we are going to Contact page so Profle component will unload from DOM , Now Component component will load in DOM.
   4- React app is single page Application,  we are just changing the page by just unloading ( ComponentWillUnmount) the component in DOM, if we go About us page to contact page, then we load the contact page (ComponentDidMount and componentDidupdate) in DOM , and unload (ComponentwillUnmount()) the About page’s child component which is  profile component will unload from DOM.

   SO when we are leaving the About page (ComponentwillUnmount() will be called) , there are lots of things to clear when we are leaving that page or that component. What will we clear? (e.g setInterval clear) we will do this in ComponentwillUnmount() life cycle Method.
   Eg in Profile.js
   import React from "react";
   class Profile extends React.Component{
      constructor(props){
         super(props)
         this.state = {
            userInfo : {
               name:"Dummy Name",
               location: "Dummy Location",
               avatar_url:""
            }
            }
         console.log("child constructor is called")
      }
      async componentDidMount(){
         const timer = setInterval(() => {
               console.log("NAMASTE REACT OP ");
            }, 1000);
            console.log(timer);
               //fetching API
               const data = await fetch("https://api.github.com/users/asma-zahra");
               const json = await data.json();
               console.log(json);
               this.setState({
                  userInfo: json,
               })
               console.log("child componentDidMount called after the child component render" );
         
      
      }
      componentDidUpdate(){
         console.log("ComponentDidUpdate called after the DOM update beacuse of State or Props Changed")
      }
      componentWillUnmount(){
         console.log("component will UnMount ")
      }
      render(){
         console.log("child render method is called")
         return(
               <>
               <h2>Profile Component</h2><br/>
               <img src={this.state?.userInfo?.avatar_url} alt="" />
               <h3>{this.state?.userInfo?.name}</h3><br/>
               <h4>{this.state?.userInfo?.location}</h4><br/>
               </>
         )
      }
   }
   export default Profile;


   OUTPUT-  
   VERY IMPORTANT CONCEPT (Class Based Component)
   after each second in the console "NAMASTE REACT OP " will be called. When load About component, even we go to Home page the also setInterval keep on calling after each second, even we go to Component page the also setInterval keep on calling after each second, it create major performance issue in our app, 
   We have to clean this interval when we go to other page, means when our component will unMount from DOM, we have to clean this interval , so we need to write the code to clean this interval in ComponentWillUnmount

   Solution - use clearInterval in ComponentWillUnMOunt() method and use this to refer the setINterval

   import React from "react";
   class Profile extends React.Component{
      constructor(props){
         super(props)
         this.state = {
            userInfo : {
               name:"Dummy Name",
               location: "Dummy Location",
               avatar_url:""
            }
            }
         console.log("child constructor is called")
      }
      async componentDidMount(){
            this.timer = setInterval(() => {
               console.log("NAMASTE REACT OP ");
            }, 1000);
            console.log( this.timer );
               //fetching API
               const data = await fetch("https://api.github.com/users/asma-zahra");
               const json = await data.json();
               console.log(json);
               this.setState({
                  userInfo: json,
               })
               console.log("child componentDidMount called after the child component render" );
         
      
      }
      componentDidUpdate(){
         console.log("ComponentDidUpdate called after the DOM update beacuse of State or Props Changed")
      }
      componentWillUnmount(){
         clearInterval(this.timer);
         console.log("component will UnMount when we move to another page")
      }
      render(){
         console.log("child render method is called")
         return(
               <>
               <h2>Profile Component</h2><br/>
               <img src={this.state?.userInfo?.avatar_url} alt="" />
               <h3>{this.state?.userInfo?.name}</h3><br/>
               <h4>{this.state?.userInfo?.location}</h4><br/>
               </>
         )
      }
   }
   export default Profile;

   OUTPUT- IN CLASS BASED COMPONENT, after each second in the console "NAMASTE REACT OP " will be called. When we load About component, BUT now when we go to any other page like home contact this setInterval will be clear because we have called clearINterval in ComponentWillUnmount() Method. So it will clear Interval when we go to other page, inthis way it will increase App performance, So Always clean setInterval

Q- Why do we use super (Props) in Constructor?
   A- Using super constructor with props arguments basically allows accessing this.props in a Constructor function.

   import React from "react";
   class App extends React.Component {
   constructor(props){
      super(props);
      console.log("Empty props ", this.props);
   }
   
   render() {
      return (
         <div>
         <p>Hello World!</p>
         </div>
      );
   }
   }
   
   export default App;
   output- {}
   Output: the props are getting logged into the console. Here props have nothing in it that’s why it is an empty object. 
Q- Why can not make Async to the callback function of useEffect?
   1- // ❌ Don't do this!
   useEffect(async () => {
      const data = await fetch("https://api.github.com/users/asma-zahra");
      const json = await data.json();
      console.log(json);
   setUsers(users);

   return () => {
      // this never gets called, hello memory leaks...
   };
   }, []);

   2- Why? Because React’s useEffect hook expects a cleanup function returned from it which is called when the component unmounts. Using an async function here will cause a bug as the cleanup function will never get called. Yikes! So what do we do?
   3- we should use an async function inside the useEffect hook. There are two patterns you could use, an immediately-invoked function expression (my preferred approach), or a named function that you invoke.
   4- Solution 1-  immediately-invoked function -
   useEffect(() => {
   (async () => {
      const data = await fetch("https://api.github.com/users/asma-zahra");
      const json = await data.json();
      console.log(json);
      setUsers(users);
   })();

   return () => {
      // this now gets called when the component unmounts
   };
   }, []);

   5- Solution 2- Named Function
   useEffect(() => {
   const getUsers = async () => {
      const data = await fetch("https://api.github.com/users/asma-zahra");
      const json = await data.json();
      console.log(json);
      setUsers(users);
   };

   getUsers(); // run it, run it

   return () => {
      // this now gets called when the component unmounts
   };
   }, []);